buildscript {
    ext {
        snippetsDir = file('build/generated-snippets')
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("se.transmode.gradle:gradle-docker:${dockerPluginVersion}")
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:${asciidoctorVersion}")
        classpath("org.springframework.cloud:spring-cloud-contract-gradle-plugin:${springCloudContractVersion}")
        classpath("org.springframework.cloud:spring-cloud-contract-spec-kotlin:${springCloudContractVersion}")
        classpath("org.springframework.cloud:spring-cloud-contract-pact:${springCloudContractVersion}")
    }
}

apply plugin: 'docker'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'spring-cloud-contract'
apply plugin: 'maven-publish'

group = 'library-service'
version = '1.0.0'
sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        languageVersion = "1.4"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        languageVersion = "1.4"
    }
}

springBoot {
    buildInfo()
}

repositories {
    mavenCentral()
}

ext.springCloudVersion = "Hoxton.SR10"

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-aop")
    implementation("org.springframework.boot:spring-boot-starter-amqp")
    implementation("org.springframework.boot:spring-boot-starter-data-mongodb")
    implementation("org.springframework.boot:spring-boot-starter-hateoas")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation("io.micrometer:micrometer-registry-prometheus")
    asciidoctor("org.springframework.restdocs:spring-restdocs-asciidoctor")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.restdocs:spring-restdocs-mockmvc")
    testImplementation("org.springframework.security:spring-security-test")
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    testImplementation("io.rest-assured:rest-assured")
    testImplementation("com.tngtech.archunit:archunit:${archunitVersion}")
    testImplementation("io.mockk:mockk:${mockkVersion}")
    testImplementation("info.novatec.testit:testutils-logrecorder-logback:${logRecorderVersion}")
    testImplementation("org.testcontainers:testcontainers:${testContainersVersion}")
    testImplementation("au.com.dius:pact-jvm-provider-junit5:${pactVersion}")
    testImplementation("org.springframework.cloud:spring-cloud-starter-contract-verifier")
    testImplementation("org.springframework.cloud:spring-cloud-contract-spec-kotlin")
    testImplementation("org.springframework.cloud:spring-cloud-contract-pact")

    contractTestImplementation("org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable:1.4.32")

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.cloud:spring-cloud-dependencies:${property("springCloudVersion")}")
        mavenBom("org.springframework.cloud:spring-cloud-contract-dependencies:${springCloudContractVersion}")
    }
}

test {
    useJUnitPlatform()
    testLogging { events "skipped", "failed", "passed" }
}

asciidoctor {
//    dependsOn acceptanceTest
    dependsOn test
    setOptions([
            'doctype': 'book',
            'backend': 'html5'
    ])
    setAttributes([
            'snippets'          : snippetsDir,
            'source-highlighter': 'coderay',
            'toc'               : 'left',
            'toclevels'         : '3',
            'sectlinks'         : 'true'
    ])
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'BOOT-INF/classes/static/docs'
    }
}

task buildDocker(type: Docker, dependsOn: build) {
    push = false
    tag = 'caaqe/library-service'

    baseImage = 'openjdk:8-jre-alpine'
    volume("/tmp")
    addFile {
        from jar
        rename { 'app.jar' }
    }
    entryPoint(['java', '-Djava.security.egd=file:/dev/./urandom', '-jar', '/app.jar'])
}

//tasks.check.dependsOn.remove(test)
//tasks.check.dependsOn contractTest

contracts {
    testFramework = 'JUNIT5'
    // Base package for generated tests
    basePackageForTests = "library.service.contracts"
    baseClassForTests = 'contractbase.HttpBase'
    baseClassMappings {
        baseClassMapping(".*\\.amqp", 'contractbase.AmqpBase')
    }
}
//contracts {

//    // sets a fallback for any mapping misses and defines base package of generated tests
//    setBaseClassForTests("provider.ContractTestBase")
//    // mapping of base classes for different contracts
//    baseClassMappings {
//        // any Spring Cloud Contract DSL-based tests should use a base class with callback methods
//        baseClassMapping(""".*\.scc""", "provider.SpringCloudContractTestBase")
//        // any PACT-based tests should use a base class with default users for security
//        baseClassMapping(""".*\.pact""", "provider.PactContractTestBase")
//    }
//}
contractTest {
    useJUnitPlatform()
}

publish.dependsOn("publishStubsToScm")

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'library.scc'
            artifactId = 'library-service'
            version = '1'
            artifact verifierStubsJar {
                classifier = 'stubs'
            }
        }
    }
}
